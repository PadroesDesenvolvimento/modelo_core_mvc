@using Microsoft.AspNetCore.Authentication
@using Microsoft.Extensions.Configuration
@using SefazLib.IdentityCfg;
@inject IdentityConfig identityConfig;
@inject IConfiguration Configuration

<h1>@ViewData["Message"]</h1>
@{
    var jwt = "";
    if (User.Identity.IsAuthenticated)
    {
        if (Configuration["identity:type"] == "azuread")
        {
            try
            {
                identityConfig.SetScope("ScopeForAccessToken");
                jwt = await identityConfig.obterAccessToken(null);
            }
            catch { }
        }
    }
}

<section>
    @if (!User.Identity.IsAuthenticated)
    {
        <h2>Usuário não autenticado.</h2>
    }
    else
    {
        <h2>Claims:</h2>
        <dl class="claims">
            @foreach (var claim in User.Claims)
            {
                <dt>@claim.Type</dt>
                <dd>@claim.Value</dd>
                <dd>@claim.Issuer</dd>
            }
        </dl>
        <h2>Propriedades:</h2>
        <dl class="claims">
            @foreach (var prop in (await Context.AuthenticateAsync()).Properties.Items)
            {
                <dt>@prop.Key</dt>
                <dd>@prop.Value</dd>
            }
        </dl>
        <dl class="claims">
            <dt>BootstrapContext</dt>
            <dd>@User.Identities.First().BootstrapContext</dd>
        </dl>

        @if (!string.IsNullOrEmpty(jwt))
        {
            <h3>jwt:</h3>
            <div class="card">
                @jwt
            </div>
        }
    }

    @if (!string.IsNullOrEmpty(ViewData["Authority"].ToString()))
    {
        <p>
            Authority: @Configuration["LoginSefaz:ServerRealm"] -
            @ViewData["Authority"]
        </p>
        <p>
            Metadata: @Configuration["LoginSefaz:Metadata"] -
            @ViewData["Metadata"]
        </p>
    }
</section>

