trigger: 
  branches:
    include:
    - Pipelines_YAML
name: $(date:yyyyMMdd)$(rev:.r)

variables:
- group: 'Default'
- group: 'F5_dmz'
- group: 'IIS'
- group: 'modelo_core_mvc'
- group: 'Pipeline'
- group: 'Helix'
- group: 'SefazIdentity'

stages:
- stage: build
  displayName: 'Criação dos artefatos'
  jobs:
  - job:
    displayName: 'Build'
    pool:
      name: Visual Studio
    steps:
    - checkout: self
    - ${{ if or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/master')) }}:
      - task: SonarQubePrepare@4
        displayName: Prepare analysis on SonarQube
        continueOnError: True
        inputs:
          SonarQube: 86a0aeb0-42e0-4aeb-bb38-c46e0b00b615
          projectKey: Layout_Padrao_modelo_core_mvc_AYICN6jAipiVWg4CBkqP
          projectName: modelo_core_mvc
          extraProperties: "# Additional properties that will be passed to the scanner, \n# Put one key=value per line, example:\nsonar.exclusions=**/wwwroot/**, **/docker/**"
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: $(projectsToBuild)
        selectOrConfig: config
        feedRestore: 4eb34145-aff0-41ad-a936-1f3645390db5
        nugetConfigPath: D:\Nuget\nuget.config
        noCache: true
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: $(projectsToBuild)
        arguments: '--configuration $(BuildConfiguration) --no-restore '
    - ${{ if or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/master')) }}:
      - task: SonarQubeAnalyze@4
        displayName: Run Code Analysis
        continueOnError: True
      - task: SonarQubePublish@4
        displayName: Publish Quality Gate Result
        continueOnError: True
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: false
        projects: $(projectsToBuild)
        arguments: --configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory) --no-build --no-restore
        zipAfterPublish: True
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
    - task: PowerShell@2
      displayName: 'Informacoes do stage'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Variaveis da execucao:"
          Get-ChildItem ENV:

- stage: Dev
  displayName: 'Deploy Dev'
  dependsOn: build
  condition: succeeded()
  variables:
  - group: 'modelo_core_mvc-webdesenv'
  - group: 'SefazIdentity-DEV'
  jobs:
  - deployment: IIS
    variables:
    - name: '_Web_Site_Nome'
      value: 'Seguro'
    environment: 
      name: envPadroesDesenvolvimento
      resourceName: SRV72208
    strategy: 
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: 'Download dos artefatos para o agent'
            env:
              NODE_TLS_REJECT_UNAUTHORIZED: 0
            artifact: drop
            patterns: '**/*.zip'
          - task: IISWebAppManagementOnMachineGroup@0
            displayName: 'IIS Web App Manage'
            inputs:
              IISDeploymentType: 'IISWebApplication'
              WebsiteName: '$(_Web_Site_Nome)'
              ParentWebsiteNameForVD: '$(_Web_Site_Nome)'
              VirtualPathForVD: '/$(_Nome_Aplicacao)'
              ParentWebsiteNameForApplication: '$(_Web_Site_Nome)'
              VirtualPathForApplication: '/$(_Nome_Aplicacao)'
              PhysicalPathForApplication: '$(_Local_IIS)\$(_Web_Site_Local)\$(_Nome_Aplicacao)'
              AddBinding: true
              Bindings: '{"bindings":[{"protocol":"http","ipAddress":"All Unassigned","port":"8088","hostname":"","sslThumbprint":"","sniFlag":false}]}'
              CreateOrUpdateAppPoolForApplication: true
              AppPoolNameForApplication: '$(_Nome_Aplicacao)'
              DotNetVersionForApplication: 'No Managed Code'
              AppPoolName: '$(_Nome_Aplicacao)'
              AppPoolNameForWebsite: '$(_Nome_Aplicacao)'
          - powershell: |
                  Write-Host "_________________________________________________________________ "
                  Write-Host "Get-ChildItem -Path '$(Pipeline.Workspace)\drop' -Recurse"
                  Write-Host ""
                  Get-ChildItem -Path "$(Pipeline.Workspace)\drop" -Recurse

                  if (Test-Path "$(Pipeline.Workspace)\drop\$(_Nome_Aplicacao).zip") {
                    Write-Host "Arquivo drop/$(_Nome_Aplicacao).zip encontrado"
                  } else {
                    Write-Host "Arquivo drop/$(_Nome_Aplicacao).zip não encontrado"
                  }
            displayName: 'Verificação da pasta drop'
          - task: IISWebAppDeploymentOnMachineGroup@0
            displayName: 'IIS Web App Deploy'
            inputs:
              WebSiteName: '$(_Web_Site_Nome)'
              VirtualApplication: '$(_Nome_Aplicacao)'
              Package: '$(Pipeline.Workspace)/drop/**/*.zip'
              RemoveAdditionalFilesFlag: true
              ExcludeFilesFromAppDataFlag: true
              TakeAppOfflineFlag: true
              XmlVariableSubstitution: true
              JSONFiles: 'appsettings.json'
          - powershell: |
                  Write-Host "_________________________________________________________________ "
                  Write-Host "appsettings"
                  Write-Host ""
                  type $(_Local_IIS)\$(_Web_Site_Local)\$(_Nome_Aplicacao)\appsettings.json
                  
                  Write-Host "_________________________________________________________________ "
                  Write-Host "web.config"
                  Write-Host ""
                  type $(_Local_IIS)\$(_Web_Site_Local)\$(_Nome_Aplicacao)\web.config
                  
                  Write-Host "_________________________________________________________________ "
                  Write-Host "Dir $(_Local_IIS)\$(_Web_Site_Local)\$(_Nome_Aplicacao)"
                  Write-Host ""
                  Get-ChildItem -Path $(_Local_IIS)\$(_Web_Site_Local)\$(_Nome_Aplicacao)
                  
                  Write-Host "_________________________________________________________________ "
                  Write-Host "Dir $(_Local_IIS)\$(_Web_Site_Local)\$(_Nome_Aplicacao)\wwwroot\img"
                  Write-Host ""
                  Get-ChildItem -Path $(_Local_IIS)\$(_Web_Site_Local)\$(_Nome_Aplicacao)\wwwroot\img
            displayName: 'Verificação do arquivo de configuração'
          - task: PowerShell@2
            displayName: 'Informacoes do stage'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "Variaveis da execucao:"
                Get-ChildItem ENV:

- stage: CriacaoLiberacao
  displayName: 'Criação de Liberação no Helix'
  dependsOn: Dev
  condition: succeeded()
  jobs: 
  - deployment: deploymentPostApproval
    displayName: 'Aprovação para criação da liberação no Helix'
    environment: Pre-aprovacao
    pool:
      name: Release PRD
    strategy:
      runOnce:
        deploy:
          steps:
          - download: none
          - task: Helix - Criacao de Liberacao (RLM)@2
            displayName: 'Criação de Liberação no Helix'
            name: CriacaoLiberacao
            inputs:
              Sumario: 'Deploy automatizado - $(_Nome_Aplicacao)'
              Servico: '$(Servico_Helix)'
              loginResponsavel: '$(Scrum_Master)'
              Ambiente_Helix: 'hml'
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          - task: PowerShell@2
            name: taskVerificarLiberacao
            displayName: 'Buscar variável HELIXRLMID'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "1-Liberação: $(HELIXRLMID)"
                Write-Host "##vso[task.setvariable variable=HELIXRLMID;isOutput=true]$(HELIXRLMID)"

- stage: verificacaoLiberacao
  displayName: 'Verificação da Liberação no Helix'
  dependsOn: CriacaoLiberacao
  condition: succeeded()
  variables:
      HELIXRLMID: $[stageDependencies.CriacaoLiberacao.deploymentPostApproval.outputs['deploymentPostApproval.taskVerificarLiberacao.HELIXRLMID']]
  jobs:
  - job: numeroLiberacao
    displayName: 'Número da Liberação no Helix'
    pool:
      name: Release PRD
    steps:
    - checkout: none
    - task: PowerShell@2
      name: taskPostApproval
      displayName: 'Buscar variável HELIXRLMID'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "2-Liberação: $(HELIXRLMID)"
          Write-Host "##vso[task.setvariable variable=HELIXRDMHMLID;isOutput=true]CRQ000000214783"

- stage: verificacaoMudanca
  displayName: 'Verificação da RDM no Helix'
  dependsOn: verificacaoLiberacao
  variables:
      HELIXRDMHMLID: $[stageDependencies.verificacaoLiberacao.numeroLiberacao.outputs['taskPostApproval.HELIXRDMHMLID']]
  jobs:
  - job: numeroLiberacao
    displayName: 'Número da RDM no Helix'
    pool:
      name: Release PRD
    steps:
    - checkout: none
    - task: PowerShell@2
      name: taskVerificarMudanca
      displayName: 'Buscar variável HELIXRDMHMLID'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "RDM: $(HELIXRDMHMLID)"
